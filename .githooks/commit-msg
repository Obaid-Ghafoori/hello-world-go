#!/bin/bash

# Define allowed commit types
VALID_TYPES="feat|fix|docs|style|refactor|test|chore"

# Ensure a commit message file is provided
COMMIT_MSG_FILE="$1"
if [[ -z "$COMMIT_MSG_FILE" || ! -f "$COMMIT_MSG_FILE" ]]; then
    echo -e "\033[0;31mERROR: Commit message file not found.\033[0m"
    exit 1
fi

# DEBUG: Print commit message file path
echo -e "\033[0;34m[DEBUG] Commit message file: $COMMIT_MSG_FILE\033[0m"

# Read the first line of the commit message
# COMMIT_MSG=$(head -n 1 "$COMMIT_MSG_FILE" | tr -d '\r')  # Handle Windows line endings
COMMIT_MSG=$(head -n 1 "$COMMIT_MSG_FILE" | sed 's/\r//g')

# DEBUG: Print actual commit message
echo -e "\033[0;34m[DEBUG] Commit message: '$COMMIT_MSG'\033[0m"

# Regular expression pattern to match valid commit messages
PATTERN="^($VALID_TYPES): .+"

# ANSI color codes for styling output
RED="\033[91m"
GREEN="\033[0;32m"
ORANGE="\033[38;2;255;165;0m"
RESET="\033[0m"

# Validate commit message format
if [[ ! "$COMMIT_MSG" =~ $PATTERN ]]; then
    echo -e "\n${RED}Commit message: '${COMMIT_MSG}'"
    echo -e "ERROR: Commit message does not follow the required format.${RESET}"
    echo -e "\nPlease use Commitizen (cz) or follow the format: '${GREEN}type: subject${RESET}'."
    echo -e "\nExample: ${GREEN}'feat: add new feature'${RESET}"
    echo -e "\nNote: Ensure your commit message starts with one of: <${ORANGE}feat, fix, docs, style, refactor, test, chore${ORANGE}.>"
    exit 1  # Reject commit
fi

# Allow commit if message is valid
exit 0
